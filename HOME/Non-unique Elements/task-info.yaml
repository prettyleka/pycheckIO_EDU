type: checkiO
files:
- name: mission.py
  visible: true
  text: |
    #Your optional code here
    #You can import some modules or create additional functions


    def checkio(data: list) -> list:
        newD=[]
        for x in data:
            if data.count(x)>1:
                newD.append(x)
        return newD

    #Some hints
    #You can use list.count(element) method for counting.
    #Create new list with non-unique elements
    #Loop over original list


    if __name__ == "__main__":
        #These "asserts" using only for self-checking and not necessary for auto-testing
        assert list(checkio([1, 2, 3, 1, 3])) == [1, 3, 1, 3], "1st example"
        assert list(checkio([1, 2, 3, 4, 5])) == [], "2nd example"
        assert list(checkio([5, 5, 5, 5, 5])) == [5, 5, 5, 5, 5], "3rd example"
        assert list(checkio([10, 9, 10, 10, 9, 8])) == [10, 9, 10, 10, 9], "4th example"
        print("It is all good. Let's check it now")
  learner_created: false
status: Solved
code: |
  #Your optional code here
  #You can import some modules or create additional functions


  def checkio(data: list) -> list:
      newD=[]
      for x in data:
          if data.count(x)>1:
              newD.append(x)
      return newD

  #Some hints
  #You can use list.count(element) method for counting.
  #Create new list with non-unique elements
  #Loop over original list


  if __name__ == "__main__":
      #These "asserts" using only for self-checking and not necessary for auto-testing
      assert list(checkio([1, 2, 3, 1, 3])) == [1, 3, 1, 3], "1st example"
      assert list(checkio([1, 2, 3, 4, 5])) == [], "2nd example"
      assert list(checkio([5, 5, 5, 5, 5])) == [5, 5, 5, 5, 5], "3rd example"
      assert list(checkio([10, 9, 10, 10, 9, 8])) == [10, 9, 10, 10, 9], "4th example"
      print("It is all good. Let's check it now")
seconds_from_change: 96864
