type: checkiO
files:
- name: mission.py
  visible: true
  text: "from typing import List, Any\n\n\ndef all_the_same(elements: List[Any]) ->\
    \ bool:\n    newList=[]\n    if len(elements)<=1:\n        return True\n    else:\n\
    \        for x in elements:\n            if x in newList:\n                pass\n\
    \            else:\n                newList.append(x)\n    if len(newList)>1:\n\
    \        return False\n    else:\n        return True\n\n\nif __name__ == '__main__':\n\
    \    print(\"Example:\")\n    print(all_the_same([1, 1, 1]))\n    \n    # These\
    \ \"asserts\" are used for self-checking and not for an auto-testing\n    assert\
    \ all_the_same([1, 1, 1]) == True\n    assert all_the_same([1, 2, 1]) == False\n\
    \    assert all_the_same(['a', 'a', 'a']) == True\n    assert all_the_same([])\
    \ == True\n    assert all_the_same([1]) == True\n    print(\"Coding complete?\
    \ Click 'Check' to earn cool rewards!\")\n"
  learner_created: false
status: Solved
code: "from typing import List, Any\n\n\ndef all_the_same(elements: List[Any]) ->\
  \ bool:\n    newList=[]\n    if len(elements)<=1:\n        return True\n    else:\n\
  \        for x in elements:\n            if x in newList:\n                pass\n\
  \            else:\n                newList.append(x)\n    if len(newList)>1:\n\
  \        return False\n    else:\n        return True\n\n\nif __name__ == '__main__':\n\
  \    print(\"Example:\")\n    print(all_the_same([1, 1, 1]))\n    \n    # These\
  \ \"asserts\" are used for self-checking and not for an auto-testing\n    assert\
  \ all_the_same([1, 1, 1]) == True\n    assert all_the_same([1, 2, 1]) == False\n\
  \    assert all_the_same(['a', 'a', 'a']) == True\n    assert all_the_same([]) ==\
  \ True\n    assert all_the_same([1]) == True\n    print(\"Coding complete? Click\
  \ 'Check' to earn cool rewards!\")\n"
seconds_from_change: 10342
